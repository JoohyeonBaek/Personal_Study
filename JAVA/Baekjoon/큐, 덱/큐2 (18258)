import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.*;

public class Main {	
	
	public static void main(String[] args) throws IOException {
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		
		int n = Integer.parseInt(br.readLine());
		
		Queue<Integer> queue = new LinkedList<Integer>();
		int back = -1;
		
		for(int i=0; i<n; i++) {
			String command = br.readLine();
			StringTokenizer st = new StringTokenizer(command," ");
			
			switch(st.nextToken()) {
			case "push":
				back = Integer.parseInt(st.nextToken());
				queue.offer(back);
				break;
				
			case "pop":
				if(queue.isEmpty())
					bw.write("-1");
				else
					bw.write(String.valueOf(queue.poll()));
				bw.newLine();
				break;
				
			case "size":
				bw.write(String.valueOf(queue.size()));
				bw.newLine();
				break;
				
			case "empty":
				if(queue.isEmpty())
					bw.write("1");
				else
					bw.write("0");
				bw.newLine();
				break;
				
			case "front":
				if(queue.isEmpty())
					bw.write("-1");
				else
					bw.write(String.valueOf(queue.peek()));
				bw.newLine();
				break;
				
			case "back":
				if(queue.isEmpty())
					bw.write("-1");
				else
					bw.write(String.valueOf(back));
				bw.newLine();
				break;		
			}									
		}
		
		bw.flush();
		
	}
}
